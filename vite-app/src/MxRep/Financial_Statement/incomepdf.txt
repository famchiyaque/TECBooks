const generateIncomePDF = () => {
    const doc = new jsPDF();

    // Add date
    doc.setFontSize(9);
    const currentDate = new Date().toLocaleDateString();
    doc.text(`Generated on: ${currentDate}`, 160, 15);

    // Add header and team info
    doc.setFontSize(20);
    doc.text("Income Statement", 105, 25, { align: "center" });
    doc.setFontSize(12);
    doc.text(`Team: ${simData.teamName}`, 105, 35, { align: "center" });

    // Set column headers
    doc.setFontSize(10);
    doc.setFont("helvetica", "bold");
    doc.text("August", 120, 48);
    doc.text("September", 150, 48);
    doc.text("October", 180, 48);

    doc.setFont("helvetica", "normal");
    // Define rows with labels and positioning
    const rows = [
      {
        label: "Net Sales",
        y: 57,
        indent: 0,
        bold: false,
        august: incomeData.netSales[0],
        september: incomeData.netSales[1],
        october: incomeData.netSales[2],
      },
      {
        label: "Cost of Goods Sold (COGS)",
        y: 63,
        indent: 0,
        bold: false,
        august: incomeData.totalCosts[0],
        september: incomeData.totalCosts[1],
        october: incomeData.totalCosts[2],
      },
      {
        label: "Gross Profit",
        y: 71,
        indent: 5,
        bold: true,
        august: incomeData.grossProfit[0],
        september: incomeData.grossProfit[1],
        october: incomeData.grossProfit[2],
      },
      {
        label: "Administrative Expenses",
        y: 83,
        indent: 0,
        bold: false,
        august: incomeData.administrativeExpenses[0],
        september: incomeData.administrativeExpenses[1],
        october: incomeData.administrativeExpenses[2],
      },
      {
        label: "Selling and Operating Expenses",
        y: 91,
        indent: 0,
        bold: false,
        august: incomeData.sellingExpenses[0],
        september: incomeData.sellingExpenses[1],
        october: incomeData.sellingExpenses[2],
      },
      {
        label: "Total Operating Expenses",
        y: 99,
        indent: 0,
        bold: false,
        august: incomeData.totalOperatingExpenses[0],
        september: incomeData.totalOperatingExpenses[1],
        october: incomeData.totalOperatingExpenses[2],
      },
      {
        label: "Operating Profit (EBITAD)",
        y: 107,
        indent: 5,
        bold: true,
        august: incomeData.operatingProfit[0],
        september: incomeData.operatingProfit[1],
        october: incomeData.operatingProfit[2],
      },
      {
        label: "Depreciation",
        y: 119,
        indent: 0,
        bold: false,
        august: incomeData.depreciation[0],
        september: incomeData.depreciation[1],
        october: incomeData.depreciation[2],
      },
      {
        label: "Other Income/Expenses",
        y: 127,
        indent: 0,
        bold: false,
        august: incomeData.otherIncome[0],
        september: incomeData.otherIncome[1],
        october: incomeData.otherIncome[2],
      },
      {
        label: "Gain/Loss on Sale of Fixed Assets",
        y: 135,
        indent: 0,
        bold: false,
        august: incomeData.fixedAssetsSale[0],
        september: incomeData.fixedAssetsSale[1],
        october: incomeData.fixedAssetsSale[2],
      },
      {
        label: "Income before Taxes",
        y: 143,
        indent: 5,
        bold: true,
        august: incomeData.incomeBeforeTax[0],
        september: incomeData.incomeBeforeTax[1],
        october: incomeData.incomeBeforeTax[2],
      },
      {
        label: "Tax Expense",
        y: 155,
        indent: 0,
        bold: false,
        august: incomeData.taxExpense[0],
        september: incomeData.taxExpense[1],
        october: incomeData.taxExpense[2],
      },
      {
        label: "Net Income",
        y: 167,
        indent: 5,
        bold: true,
        august: incomeData.netIncome[0],
        september: incomeData.netIncome[1],
        october: incomeData.netIncome[2],
      },
    ];

    // Loop through each row and add text with indentation and bold styling
    rows.forEach((row) => {
      doc.setFont("helvetica", row.bold ? "bold" : "normal");
      doc.text(row.label, 20 + row.indent, row.y);
      doc.text(`${row.august}`, 120, row.y);
      doc.text(`${row.september}`, 150, row.y);
      doc.text(`${row.october}`, 180, row.y);
    });

    // Save the PDF
    const fileName = `${simData.teamName}_Income_Statement_${
      new Date().toISOString().split("T")[0]
    }.pdf`;
    doc.save(fileName);
  };